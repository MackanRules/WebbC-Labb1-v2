@inject IAdminService AdminService


@if (!string.IsNullOrEmpty(Alert)){

	<div class="d-flex">
		<div class"alert alert-danger alert-dismissible fade show= role="alert">
			<strong>@Alert</strong>
				<button type="button" @onclick="CloseAlert" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
		</div>
	</div>

}

@if (Navigation == PageType.Create)
{
		<ChangeFilmGenre Page="@Navigation" OnChanged="OnChange"></ChangeFilmGenre>
}
@if (Navigation == PageType.Delete || Navigation == PageType.Edit)
{
		<ChangeFilmGenre Page="@Navigation" OnChanged="OnChange" Model="FilmGenre"></ChangeFilmGenre>
}

<div class="d-flex me-1">
	<a href="/" class="btn btn-outline-secondary rounded-0 me-1">Home</a>
	<button type="button" class="btn btn-outline-primary rounded-0 me-1" @onclick="()=>ChangePageType(PageType.Index)">Index</button>
	<button type="button" class="btn btn-outline-success rounded-0" @onclick="()=>ChangePageType(PageType.Create)">Create</button>
</div>

<FilmGenreIndex OnClick="OnClick" Model="Model"></FilmGenreIndex>

@code {

	List<FilmGenreDTO> Model { get; set; } = new();
	string Alert = string.Empty;
	string Navigation = string.Empty;
	public FilmGenreDTO Genre { get; set; } = new();

	void ChangePageType(string pageType){
		Navigation = pageType;
	}

	void CloseAlert(){
		Alert = string.Empty;
	}

	protected override async Task OnInitializedAsync()
	{
		Alert = "";
		Model = await AdminService.GetAsync<FilmGenreDTO>($"FilmGenres");

	}

	async Task OnClick(ClickModel model)
	{
		if (model.PageType.Equals(PageType.Edit) || model.PageType.Equals(PageType.Delete))
			Genre = await AdminService.SingleAsync<FilmGenreDTO>($"filmgenres/{model.Id}") ?? new();

		ChangePageType(model.PageType);
	}

	async Task OnChange(string alert)
	{
		try
		{
			Alert = alert;
			Model = await AdminService.GetAsync<FilmGenreDTO>("filmgenres");
			ChangePageType(PageType.Index);
		}
		catch
		{
			Alert = "Couldn't create/edit/delete the filmgenre.";
		}
	}

}